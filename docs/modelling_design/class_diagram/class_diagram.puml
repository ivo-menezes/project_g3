@startuml

skinparam linetype ortho

' UIs
class CreateProfileUI {}
class RegisterAccountUI {}
class ChangeProfileUI {}
class ListAccountsUI {}
class AccountStatusUI {}
class CreateProjectUI {}
class AssociateResourceUI {}

class ResourceDTO {
email: String
projectCode: int
startDate: Date
percentAllocation: double
costPerHour: double
roleName: String
}

class ListResourcesUI {}
class ListProjectUI {}
class UserProjectsUI {}
class CreateTypologyUI {}
class CreateBusinessSectorUI{}
class AddCustomerUI {}

' Controllers
class CreateProfileController {
profileList : ProfileList
createProfile(profileName)
}

class RegisterAccountController {
accountList : AccountList
profileList : ProfileList
registerAccount(registerAccountDTO)
}

class RegisterAccountDTO {
name : String
email : String
phone : String
photo : String
}

class ChangeProfileController {
profileList : ProfileList
accountList : AccountList
changeProfile(email, newProfileName)
}

class ListAccountsController{
accountList: AccountList
listAccounts()
}

class AccountStatusController {
changeAccountStatus(email, newStatus)
}

class CreateProjectController {
projectList : ProjectList
createProject(code, name, description)
}

class AssociateResourceController {
accountList: AccountList
roleList: RoleList
projectList: ProjectList
addResource(resourceDTO)
}

class ListResourcesController{
projectList : ProjectList
listResources(projectCode)
}

class ListProjectController{
listProjectDTO()
}

class UserProjectsController {
projectList : ProjectList
listUserProjectsDTO (Account currentUser)
}

class CreateTypologyController {
typologyList : TypologyList
createTypology(typologyDesignation)
}

class CreateBusinessSectorController{
businessSectorList : BusinessSectorList
createBusinessSector(designation)
}

class AddCustomerController {
customerList : CustomerList
addCustomer(designation)
}

' Business Layer

class Profile {
name : String
}

class Account {
profile : Profile
name : String
email : String
phone : String
photo : Photo
isActive : boolean
activateAccount()
inactivateAccount()
isUser()
}

class AccountDTO {
email : String
isActive : boolean
create(email, status)
}

' Data Access Layer

class ProfileList {
profiles : List<Profile>
getProfile(profileName)
save(profile)
}

class AccountList {
accounts: List<Account>
registerAccount(registerAccountDTO, profile)
addAccount (account)
getAccountAtIndex(index)
getAccount(email)
}


class ProjectList {
projectList : List<Project>
createProject(code, name, description)
validateProjectCode(code)
addProject(newProject)
getProject(projectCode)
listSize()
getProjectIndex(i)
create(projectDTO)
}

'class AccountList {
'AccountList : List<Account>
'checkPermissionsToCreateAProject(accountEmail)
'}

class Project {
projectCode : int
name : String
description : String
startDate: Date
endDate: Date
customer: String
sprintDuration: int
numberOfPlannedSprints: int
projectStatus: String
budget: double
resourceList: ResourceList
addResource(account, role, resourceDTO)
listResources(project)
getCode()
getName()
getCustomer()
getStartDate()
getEndDate()
getStatusProject()
}

class RoleList {
roleList: List<Role>
getRole(roleName)
}

class Role {
description: String
}

class ResourceList {
resourceList: List<Resource>
addResource(account, role, resourceDTO)
existsActiveResourceWithAccount(account)
listResources()
listResourceSize()
getResourceIndex(j)
}

class Resource {
role: Role
account: Account
startDate: Date
endDate: Date
percentAllocation: double
costPerHour: double
isAccountOfResource(account)
isActive()
getRole()
createResourceDTO()
getAccount()
getEndDate()
}

class ProjectDTO {
}
class UserProjectsDTO{
code : Integer
name : String
}

class TypologyList {
typologyList : List<Typology>
createTypology(typologyDesignation)
listDoesNotContain(newTypology)
add(newTypology)
}

class Typology {
typologyDesignation : String
}

class BusinessSectorList{
businessSectorList : List<BusinessSector>
createBusinessSector(designation)
listDoesNotContainSector(newBusinessSector)
add(newBusinessSector)
}

class BusinessSector{
designation : String
}

class CustomerList {
customerList : List<Customer>
create(designation)
listDoesNotContain(newCustomer)
addCustomer(newCustomer)
}

class Customer {
designation : String
}


' Associations and dependencies

CreateProfileUI "1" o-down- "1" CreateProfileController
CreateProfileController "1" o-- "1" ProfileList
ProfileList "1 " *-- "    *" Profile

RegisterAccountUI "1" o-- "1" RegisterAccountController
RegisterAccountController "1" o-- "1" ProfileList
RegisterAccountController ..> Profile
RegisterAccountController "1" o-- "1" AccountList
RegisterAccountController ..> RegisterAccountDTO
AccountList ..> RegisterAccountDTO

Account ..> Profile
AccountList "1" *-- "*" Account

ChangeProfileUI "1" o-down- "1" ChangeProfileController
ChangeProfileController "1" o-- "1" AccountList
ChangeProfileController  "1" o-- "1"  ProfileList
ChangeProfileController ..> Account

ListAccountsController "1" o-- "1" AccountList
ListAccountsUI "1" o-- "1" ListAccountsController
AccountList ..> AccountDTO
AccountDTO ..> Account

AccountStatusUI "1" o-- "1" AccountStatusController
AccountStatusController "1" o-- "1  " "AccountList"
AccountStatusController "1" ..> "1" Account

CreateProjectUI "1" o-down- "1" CreateProjectController
CreateProjectController "1" o-- "1" ProjectList
ProjectList "1 " *-- "*" Project

AssociateResourceUI o-down- AssociateResourceController
AssociateResourceController o-down- ProjectList
Project o-- ResourceList
ResourceList *-- Resource
AccountList *-- Account
RoleList *-- Role
AssociateResourceController o-- AccountList
AssociateResourceController ..> Account
AssociateResourceController o-- RoleList
Resource o-left- Account
Resource o-left- Role
AssociateResourceUI ..> ResourceDTO
AssociateResourceController ..> ResourceDTO
Project .right.> ResourceDTO
ResourceList .right.> ResourceDTO
AssociateResourceController ..> Project
AssociateResourceController .right.> Role

ListResourcesUI "1 " o-down- "1 " ListResourcesController
ListResourcesController "1 " o-- "1 " ProjectList
ListResourcesController .down.> Project
ResourceDTO "1" .down.> Resource

ListProjectController "1" o-down- "1" ProjectList
ListProjectUI "1" o-down- "1" ListProjectController
ProjectList ..> ProjectDTO
ProjectDTO ..> Project

UserProjectsUI "1" o-- "1" UserProjectsController
UserProjectsController "1" o-- "1" ProjectList
ProjectList ..> UserProjectsDTO
Project ..> UserProjectsDTO
UserProjectsController "1" o-- "*" Project

CreateTypologyUI "1" o-- "1" CreateTypologyController
CreateTypologyController "1" o-- "1" TypologyList
TypologyList "1 " *-- "    *" Typology

BusinessSectorList "1" *-- "*" BusinessSector
CreateBusinessSectorController "1" o-- "1" BusinessSectorList
CreateBusinessSectorUI "1" o-- "1" CreateBusinessSectorController

AddCustomerUI "     1" o-- "        1" AddCustomerController
AddCustomerController "     1" o-- "        1" CustomerList
CustomerList "  1" *-- "   *" Customer
@enduml