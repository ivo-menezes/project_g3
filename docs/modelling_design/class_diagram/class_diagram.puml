@startuml

skinparam linetype ortho


' Controllers
class CreateProfileController {
profileList : ProfileList
createProfile(profileName)
}

class RegisterAccountController {
accountList : AccountList
profileList : ProfileList
registerAccount(registerAccountDTO)
}

class RegisterAccountDTO {
name : String
email : String
phone : String
photo : String
}

class ChangeProfileController {
profileList : ProfileList
accountList : AccountList
changeProfile(email, newProfileName)
}

class ListAccountsController{
accountList: AccountList
listAccounts()
}

class AccountStatusController {
changeAccountStatus(email, newStatus)
}

class CreateProjectController {
projectList : ProjectList
createProject(code, name, description)
}

class AssociateResourceController {
accountList: AccountList
roleList: RoleList
projectList: ProjectList
addResource(resourceDTO)
}

class ListResourcesController{
projectList : ProjectList
listResources(projectCode)
}

class ListProjectController{
listProjectDTO()
}

class UserProjectsController {
projectList : ProjectList
listUserProjectsDTO (Account currentUser)
}

class CreateTypologyController {
typologyList : TypologyList
createTypology(typologyDesignation)
}

class CreateBusinessSectorController{
businessSectorList : BusinessSectorList
createBusinessSector(designation)
}

class AddCustomerController {
customerList : CustomerList
addCustomer(designation)
}

class CreateUserStoryController {
projectList : ProjectList
createUserStory(projectCode, userStoryDTO, priority)
}

class ConsultProductBacklogController {
projectList : ProjectList
userStoryMapper : UserStoryMapper
getProductBacklog(projectCode)
}

class CreateSprintController {
projectList: ProjectList
createSprint(projectCode, sprintDTO)
}

class AddUserStoryController {
projectList : ProjectList
addUserStoryFromProductBacklogToSprintBacklog(projectCode, userStoryID, sprintNumber)
}

class EstimateEffortController {
projectList: ProjectList
estimateEffortUserStory (int projectCode, \nint sprintNumber, String idUserStory, double effort)
}

class ViewScrumBoardController {
projectList: ProjectList
sprintList: SprintList
viewScrumBoard(projectCode, sprintNumber)
}

' Business Layer

class Profile {
name : String
}

class Account {
profile : Profile
name : String
email : String
phone : String
photo : Photo
isActive : boolean
activateAccount()
inactivateAccount()
isUser()
}

class AccountDTO {
email : String
isActive : boolean
create(email, status)
}

' Data Access Layer

class ProfileList {
profiles : List<Profile>
getProfile(profileName)
save(profile)
}

class AccountList {
accounts: List<Account>
registerAccount(registerAccountDTO, profile)
addAccount (account)
getAccountAtIndex(index)
getAccount(email)
}


class ProjectList {
projectList : List<Project>
createProject(code, name, description)
validateProjectCode(code)
addProject(newProject)
getProject(projectCode)
listSize()
getProjectIndex(i)
create(projectDTO)
}


'class AccountList {
'AccountList : List<Account>
'checkPermissionsToCreateAProject(accountEmail)
'}

class Project {
projectCode : int
name : String
description : String
startDate: Date
endDate: Date
customer: String
sprintDuration: int
numberOfPlannedSprints: int
projectStatus: String
budget: double
resourceList: ResourceList
productBacklog : ProductBacklog
sprintList: SprintList
addResource(account, role, resourceDTO)
listResources(project)
getCode()
getName()
getCustomer()
getStartDate()
getEndDate()
getStatusProject()
getProductBacklog()
getSprintList()
}

class RoleList {
roleList: List<Role>
getRole(roleName)
}

class Role {
description: String
}

class ResourceList {
resourceList: List<Resource>
addResource(account, role, resourceDTO)
existsActiveResourceWithAccount(account)
listResources()
listResourceSize()
getResourceIndex(j)
}

class Resource {
role: Role
account: Account
startDate: Date
endDate: Date
percentAllocation: double
costPerHour: double
isAccountOfResource(account)
isActive()
getRole()
createResourceDTO()
getAccount()
getEndDate()
}

class ProjectDTO {
}
class UserProjectsDTO{
code : Integer
name : String
}

class TypologyList {
typologyList : List<Typology>
createTypology(typologyDesignation)
listDoesNotContain(newTypology)
add(newTypology)
}

class Typology {
typologyDesignation : String
}

class BusinessSectorList{
businessSectorList : List<BusinessSector>
createBusinessSector(designation)
listDoesNotContainSector(newBusinessSector)
add(newBusinessSector)
}

class BusinessSector{
designation : String
}

class CustomerList {
customerList : List<Customer>
create(designation)
listDoesNotContain(newCustomer)
addCustomer(newCustomer)
}

class Customer {
designation : String
}

class UserStoryMapper{
toDTOList(userStoryList)
toDTO(userStory)
}

class ProductBacklog {
userStories: List<UserStory>
completedUserStories : List<UserStory>
factoryUserStory : IFactoryUserStory
mapper : UserStoryMapper
createUserStoryFromDTO(userStoryDTO)
createAndAddUserStory(userStoryDTO, priority)
doesNotContain(userStory)
add(userStory, priority)
getUserStoryList()
getUserStory(UserStoryID)
}

class FactoryUserStoryImpl {
createUserStory(id, actor, text, acceptanceCriteria)
}

interface IFactoryUserStory {
createUserStory(id, actor, text, acceptanceCriteria)
}

class UserStory {
id : String
actor : String
text : String
acceptanceCriteria : String
status : Status
getID()
}

class UserStoryMapper {
fromDTO(UserStoryDTO)
toDTOList(userStoryList)
toDTO(userStory)
}

class UserStoryDTO {
id : String
actor : String
text : String
acceptanceCriteria : String
}

class SprintList {
sprintList: List<Sprint>
isValidDate(sprintDTO)
createSprint(sprintDTO)
hasSprint(sprint)
add(sprint)
getSprint(sprintNumber)
}

class Sprint{
sprintNumber: int
startDate: Date
endDate: Date
sprintBacklog : List<UserStory>
getSprintNumber()
existsUserStory()
addUserStoryToSprintBacklog()
validEffortEstimate(effort)
estimateEffortForUserStory (userStoryID, effort)
viewScrumBoardList()
}

class sprintDTO {
sprintNumber: int
startDate: Date
endDate: Date
}

class UserStoryScrumBoardMapper{
toDTO(userStory)
}


' Associations and dependencies

CreateProfileController "1" o-- "1" ProfileList
ProfileList "1 " *-- "    *" Profile

RegisterAccountController "1" o-- "1" ProfileList
RegisterAccountController ..> Profile
RegisterAccountController "1" o-- "1" AccountList
RegisterAccountController ..> RegisterAccountDTO
AccountList ..> RegisterAccountDTO

Account ..> Profile
AccountList "1" *-- "*" Account

ChangeProfileController "1" o-- "1" AccountList
ChangeProfileController  "1" o-- "1"  ProfileList
ChangeProfileController ..> Account

ListAccountsController "1" o-- "1" AccountList
AccountList ..> AccountDTO
AccountDTO ..> Account

AccountStatusController "1" o-- "1  " "AccountList"
AccountStatusController "1" ..> "1" Account

CreateProjectController "1" o-- "1" ProjectList
ProjectList "1 " *-- "*" Project

AssociateResourceController o-down- ProjectList
Project o-- ResourceList
ResourceList *-- Resource
AccountList *-- Account
RoleList *-- Role
AssociateResourceController o-- AccountList
AssociateResourceController ..> Account
AssociateResourceController o-- RoleList
Resource o-left- Account
Resource o-left- Role
AssociateResourceController ..> ResourceDTO
Project .right.> ResourceDTO
ResourceList .right.> ResourceDTO
AssociateResourceController ..> Project
AssociateResourceController .right.> Role

ListResourcesController "1 " o-- "1 " ProjectList
ListResourcesController .down.> Project
ResourceDTO "1" .down.> Resource

ListProjectController "1" o-down- "1" ProjectList
ProjectList ..> ProjectDTO
ProjectDTO ..> Project

UserProjectsController "1" o-- "1" ProjectList
ProjectList ..> UserProjectsDTO
Project ..> UserProjectsDTO
UserProjectsController "1" o-- "*" Project

CreateTypologyController "1" o-- "1" TypologyList
TypologyList "1 " *-- "    *" Typology

BusinessSectorList "1" *-- "*" BusinessSector
CreateBusinessSectorController "1" o-- "1" BusinessSectorList

AddCustomerController "     1" o-- "        1" CustomerList
CustomerList "  1" *-- "   *" Customer

CreateUserStoryController "1" o-- "1" ProjectList
CreateUserStoryController ..> UserStoryDTO
CreateUserStoryController ..> Project
CreateUserStoryController ..> ProductBacklog
ProductBacklog ..> UserStoryDTO
Project "1" o-- "1" ProductBacklog
ProductBacklog "1" *-- "*" UserStory
ProductBacklog "1" o-- "1" UserStoryMapper
UserStoryMapper ..> UserStoryDTO
UserStoryDTO ..> UserStory
UserStoryMapper ..> UserStory
FactoryUserStoryImpl -up..|> IFactoryUserStory
ProductBacklog "1" o-- "1" IFactoryUserStory
FactoryUserStoryImpl ..> UserStory

ConsultProductBacklogController "1 " o-- "1" ProjectList
ConsultProductBacklogController "1" o-- "1" UserStoryMapper
ConsultProductBacklogController ..> UserStoryDTO
UserStoryMapper ..> UserStoryDTO

CreateSprintController "1" o-- "1" ProjectList
CreateSprintController ..> Project
CreateSprintController ..> SprintList
Project "1" o-- "1" SprintList
CreateSprintController ..> sprintDTO
SprintList "1" *-- "*" Sprint
Project ..> sprintDTO
SprintList ..> sprintDTO

AddUserStoryController "1 " o-- "1 " ProjectList
Sprint "1 " *-- " *  " UserStory

EstimateEffortController "      1" o-- "      1" ProjectList

ViewScrumBoardController "1" o-- "1" ProjectList
ViewScrumBoardController ..> Project
ViewScrumBoardController ..> SprintList
ViewScrumBoardController .down.> Sprint
ViewScrumBoardController ..> SprintList
Sprint "1" o-right- "1" UserStoryScrumBoardMapper
Sprint .right.> userStoryDTO
UserStoryScrumBoardMapper ..> userStoryDTO



@enduml