@startuml
!theme plain
hide footbox
autonumber
skinparam sequence {
LifeLineBackgroundColor #FFBBBB
}
title "US019 - As Project Manager, I want to create a sprint."

participant Client
participant "Springboot"
participant "sprintRestDto : SprintRestDto" as restDto
participant ": SprintController" as Controller
participant ": SprintRestDtoMapper" as RestMapper
participant ": SprintService" as Service
participant ": IProjectRepository" as ProjectRepository
participant ": IFactorySprint" as Factory
participant "sprintID : SprintID" as SprintID
participant "sprint : Sprint" as Sprint
participant ": ISprintRepository" as Repository
participant ": SprintAssemblerData" as Assembler
participant ": ISprintRepositoryJPA" as RepositoryJPA
participant ": NewSprintDtoMapper" as NewMapper
participant "allSprints : List<Sprint>" as allSprints
participant "sprintJpa : SprintJpa" as SprintJpa
participant "savedSprint : Sprint" as savedSprint
participant "sprintRestDto : SprintRestDto" as sprintRestDto
participant "response : ResponseEntity<sprintRestDto>" as response

activate Client
Client ->  Springboot: POST sprints/{projectCode} \n{"projectCode":"code", "startDate": "startDate"\n "endDate": "endDate"}

activate Springboot
Springboot --> restDto **: create(projectCode,\n startDate, endDate)
Springboot -> Controller: createSprint(sprintRestDto)
deactivate Springboot
activate Controller

Controller -> RestMapper : createProjectCode(sprintRestDTO)
activate RestMapper
RestMapper --> Controller : newSprintDto

deactivate RestMapper

Controller -> Service : getNewSprintNumber(projectCode)
activate Service
Service -> ProjectRepository : existsByProjectCode(projectCode)
activate ProjectRepository
ProjectRepository --> Service : true
deactivate ProjectRepository
Service -> Repository: findByProjectCode(projectCode)
activate Repository

Repository -> RepositoryJPA : findAllByProjectCode(projectCode)
activate RepositoryJPA
RepositoryJPA --> Repository: listJPA
deactivate RepositoryJPA
Repository -> allSprints ** : create
loop for each sprintJPA in listJPA
Repository -> Assembler : toDomain(sprintJPA)
activate Assembler
Assembler --> Repository : sprint
deactivate Assembler
Repository -> allSprints : add(sprint)
activate allSprints
deactivate allSprints
end

Repository --> Service : allSprints
deactivate Repository

Service -> Service : allSprints.size()+1
activate Service #Darksalmon
deactivate Service
Service --> Controller : newSprintNumber
deactivate Service

Controller -> RestMapper : toDomainDto(sprintRestDTO)
activate RestMapper
RestMapper --> Controller : sprintDto

deactivate RestMapper

Controller -> Service : createSprint(sprintDto)
deactivate Repository
activate Service
Service -> Factory : newSprintID(projectCode, newSprintNumber)
activate Factory
Factory --> SprintID ** : create
Factory --> Service : sprintID
Service -> Factory: createSprint(sprintDto)


Factory --> Sprint ** : create
Factory --> Service : sprint
deactivate


Service -> Service : !hasTimePeriodOverlap\n(projectCode, timePeriod)
activate Service #Darksalmon
Service -> Service : sprintIsContainedInProjectTimePeriod\n(projectCode, timePeriod)
deactivate Service

Service -> Repository :save(sprint)
activate Repository



Repository -> Assembler : toData(sprint)
activate Assembler
Assembler --> SprintJpa ** :create(sprint)
Assembler --> Repository: sprintJpa
deactivate Assembler

Repository -> RepositoryJPA : save(sprintJpa)
activate RepositoryJPA
RepositoryJPA --> Repository : savedSprintJpa
deactivate RepositoryJPA
Repository -> Assembler : toDomain(savedSprintJpa)
activate Assembler
Assembler --> savedSprint ** :create(savedSprintJpa)
Assembler --> Repository : savedSprint
deactivate Assembler

Repository --> Service: savedSprint
deactivate Repository
Service -> NewMapper : convertToDto(savedSprint)
activate NewMapper
NewMapper --> Service : savedSprintDto
deactivate NewMapper

Service --> Controller: savedSprintDto
deactivate Service
Controller -> RestMapper :toRestDto(savedSprintDto)
activate RestMapper
RestMapper --> sprintRestDto ** :Create(savedSprintDto)
RestMapper --> Controller :sprintRestDto
deactivate RestMapper
Controller --> response ** : create(sprintRestDto, HttpStatus.CREATED)
Controller --> Client: Confirms created Sprint
deactivate Controller
deactivate Client
@enduml