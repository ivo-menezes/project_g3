@startuml
!theme plain
hide footbox
autonumber
skinparam sequence {
LifeLineBackgroundColor #FFBBBB
}
title "US019 - As Project Manager, I want to create a sprint."

participant Client
participant "Springboot"
participant "sprintRestDto : SprintRestDto" as restDto
participant ": SprintController" as Controller
participant ": SprintRestDtoMapper" as RestMapper
participant ": SprintService" as Service
participant ": IFactorySprint" as Factory
participant "sprintID : SprintID" as SprintID
participant "sprint : Sprint" as Sprint
participant ": ISprintRepository" as Repository
participant ": SprintAssemblerData" as Assembler
participant ": ISprintRepositoryJPA" as RepositoryJPA
participant ": NewSprintDtoMapper" as NewMapper
participant "sprintJpa : SprintJpa" as SprintJpa
participant "savedSprint : Sprint" as savedSprint
participant "sprintRestDtoOut : SprintRestDto" as sprintRestDtoOut
participant "response : ResponseEntity<sprintRestDto>" as response

activate Client
Client ->  Springboot: POST sprints/{projectCode} \n{"projectCode":"code", "startDate": "startDate"\n "endDate": "endDate"}

activate Springboot
Springboot --> restDto **: create(projectCode,\n startDate, endDate)
Springboot -> Controller: createSprint(sprintRestDto)
deactivate Springboot
activate Controller

Controller -> RestMapper : toDomainDto(sprintRestDto)
activate RestMapper
RestMapper --> Controller : sprintDto
deactivate RestMapper
Controller -> Service : createSprint(sprintDto)
activate Service

Service -> Repository : getNewSprintNumber(projectCode)
activate Repository

Repository -> RepositoryJPA : findProjectCode(projectCode)
activate RepositoryJPA
RepositoryJPA --> Repository: sprints
Repository -> RepositoryJPA : count()
RepositoryJPA --> Repository: numberOfSprints
deactivate RepositoryJPA

Repository --> Service : newSprintNumber
deactivate Repository

Service -> Factory: createSprint(sprintDto)
activate Factory

Factory --> SprintID ** : create(projectCode, newSprintNumber)

Factory --> Sprint ** : create (sprintID, timePeriod)
Factory --> Service : sprint
deactivate

Service -> Repository :save(sprint)
activate Repository

Repository -> Repository : !hasDateOverlap(projectCode,\n newStartDate)
activate Repository #Darksalmon
Repository -> RepositoryJPA : findLastSprintByProjectCode(projectCode)
activate RepositoryJPA
RepositoryJPA --> Repository : lastSprint
deactivate Repository
deactivate RepositoryJPA

Repository -> Assembler : toData(sprint)
activate Assembler
Assembler --> SprintJpa ** :Create(sprint)
Assembler --> Repository: sprintJpa
deactivate Assembler

Repository -> RepositoryJPA : save(sprintJpa)
activate RepositoryJPA #FFBBBB
RepositoryJPA --> Repository : savedSprintJpa
deactivate RepositoryJPA
Repository -> Assembler : toDomain(savedSprintJpa)
activate Assembler #FFBBBB
Assembler --> savedSprint ** :Create(savedSprintJpa)
Assembler --> Repository : savedSprint
deactivate Assembler

Repository --> Service: savedSprint
deactivate Repository
Service -> NewMapper : convertToDto(savedSprint)
activate NewMapper
NewMapper --> Service : savedSprintDto
deactivate

Service --> Controller: savedSprintDto
deactivate
Controller -> RestMapper :toRestDto(savedSprintDto)
activate RestMapper
RestMapper --> sprintRestDtoOut ** :Create(savedSprintDto)
RestMapper --> Controller :sprintRestDtoOut
deactivate RestMapper
Controller --> response ** : create(sprintRestDtoOut, HttpStatus.CREATED)
Controller --> Client: Confirms created Sprint
deactivate Controller
deactivate Client
@enduml